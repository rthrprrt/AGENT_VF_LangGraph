name: Python CI AGENT_VF_LangGraph

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"] # Spécifier la version Python exacte

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true # Optionnel: crée .venv dans le projet, peut simplifier certains IDE
        installer-parallel: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv # Chemin vers le cache de l'environnement virtuel si virtualenvs-in-project est true
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root --with dev # Installe les dépendances principales et de dev

    - name: Install project (if cache was hit, project itself might not be installed)
      run: poetry install --no-interaction --with dev

    - name: Lint with Ruff
      run: |
        poetry run ruff check .
        poetry run ruff format . --check

    - name: Test with Pytest
      run: |
        poetry run pytest